package ic2.api.classic.trading.providers;

import java.util.List;
import java.util.UUID;

import ic2.api.classic.trading.ITradeListener;
import ic2.api.classic.trading.trades.ISubTrade;
import ic2.api.classic.trading.trades.ITrade;
import net.minecraft.item.ItemStack;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;

public interface ITradeProvider
{
	/**
	 * @return owner of this tradeProvider
	 */
	public UUID getOwner();
	
	/**
	 * @param player Who wants the trades (Not null!)
	 * @return a list of valid trades for this player
	 */
	public List<ITrade> getTradesForPlayer(UUID player);
	
	/**
	 * Function to get the id of the trade
	 * @param trade The trade you provide (none null)
	 * @return the id of the trade
	 */
	public int getSlotForTrade(ITrade trade);
	
	/**
	 * function to get a special trade
	 * @param trade the tradeID
	 * @param player the player who should get it.
	 * @return the trade for the player. can be null if the player is no longer able to get the trade
	 */
	public ITrade getTradeForSlot(int trade, UUID player);
	
	/**
	 * Function when a trade got performed
	 * @param player The player who did the trade
	 * @param trade the Trade that is done
	 * @param list the items that it owner of the market got
	 */
	public void onTradePerformed(UUID player, ISubTrade trade, List<ItemStack> list);
	
	/**
	 * @return The world of the Trade Providers
	 */
	public World getProviderWorld();
	
	/**
	 * @return The position of the trade providers
	 */
	public BlockPos getProviderPos();
	
	/**
	 * Function to add a TradeListener that get notified on trade actions
	 * @param listener that wants to be added
	 * Note: You have to remove all listeners and tell them that this provider is 
	 * no longer beeing used when you store them
	 */
	public void addListener(ITradeListener listener);
	
	/**
	 * Function to remove a listener
	 * @param listener that wants to be removed
	 */
	public void removeListener(ITradeListener listener);
	
	/**
	 * Function to add a trade to the Trade Provider
	 * @param trade the trade you want to add
	 */
	public void addTrade(ITrade trade);
	
	/**
	 * Function to know if the trade provider is done by worldgen or not
	 * @return is generated by the world
	 */
	public boolean isWorldGen();
	
	/**
	 * Function to get money coins based of the money a person would get back
	 * thats a better solution and allows to do special coins for a custom trade provider
	 * @param moneyValue the money they would get back
	 * @return the list of items (coins) they would get
	 */
	public List<ItemStack> generateCoins(int moneyValue);
	
}
